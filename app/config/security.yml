# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
security:
    encoders:
        # Our user class and the algorithm we'll use to encode passwords
        # https://symfony.com/doc/current/security.html#c-encoding-the-user-s-password
        AppBundle\Entity\User: plaintext,
        AppBundle\Entity\Admin: plaintext

    providers:
        # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/AppBundle/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/custom_provider.html
        database_users:
            entity: { class: AppBundle:User, property: userName }
        database_admins:
            entity: { class: AppBundle:Admin, property: login }

    firewalls:
        admin_secured_area:
            # this firewall applies to ^/admin URLs
            pattern: ^/admin/

            # but the firewall does not require login on every page
            # denying access is done in access_control or in your controllers
            anonymous: true

            provider: database_admins
            # This allows the user to login by submitting a username and password
            # Reference: https://symfony.com/doc/current/security/form_login_setup.html
            form_login:
                            # The route name that the login form submits to
                check_path: security_admin_login
                            # The name of the route where the login form lives
                            # When the user tries to access a protected page, they are redirected here
                login_path: security_admin_login
                            # Secure the login form against CSRF
                            # Reference: https://symfony.com/doc/current/security/csrf_in_login_form.html
                csrf_token_generator: security.csrf.token_manager
                            # The page users are redirect to when there is no previous page stored in the
                            # session (for example when the users access directly to the login page).
                username_parameter: _username
                password_parameter: _password

                default_target_path: home
            logout:
                # The route name the user can go to in order to logout
                path: admin_logout
                # The name of the route to redirect to after logging out
                target: home
#        user_secured_area:
#            # this firewall applies to ^/admin URLs
#            pattern: ^/admin/
#
#            # but the firewall does not require login on every page
#            # denying access is done in access_control or in your controllers
#            anonymous: true
#
#            # This allows the user to login by submitting a username and password
#            # Reference: https://symfony.com/doc/current/security/form_login_setup.html
#            form_login:
#                            # The route name that the login form submits to
#                check_path: security_admin_login
#                            # The name of the route where the login form lives
#                            # When the user tries to access a protected page, they are redirected here
#                login_path: security_admin_login
#                            # Secure the login form against CSRF
#                            # Reference: https://symfony.com/doc/current/security/csrf_in_login_form.html
#                csrf_token_generator: security.csrf.token_manager
#                            # The page users are redirect to when there is no previous page stored in the
#                            # session (for example when the users access directly to the login page).
#                username_parameter: _username
#                password_parameter: _password
#
#                default_target_path: home
#            logout:
#                # The route name the user can go to in order to logout
#                path: /admin/logout
#                # The name of the route to redirect to after logging out
#                target: home

